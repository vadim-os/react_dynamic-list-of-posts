{"version":3,"sources":["api.js","User.js","Comment.js","CommentList.js","Post.js","PostList.js","App.js","index.js"],"names":["API_URL","getData","URL","defaultData","fetch","then","response","ok","json","catch","User","_ref","user","react_default","a","createElement","className","name","email","address","street","suite","city","Comment","comment","body","CommentList","comments","map","src_Comment","key","id","Post","post","title","src_User","src_CommentList","PostList","posts","filterPosts","Fragment","type","onChange","event","target","value","length","src_Post","App","_useState","useState","_useState2","Object","slicedToArray","setPosts","_useState3","_useState4","isLoading","setLoading","_useState5","_useState6","isLoaded","setLoaded","_useState7","_useState8","filter","setFilter","filteredPosts","toLowerCase","includes","src_PostList","input","onClick","_ref2","postsFromServer","usersFromServer","commentsFromServer","preparedPosts","regenerator_default","async","_context","prev","next","awrap","Promise","all","concat","sent","find","item","userId","postId","objectSpread2","stop","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f80f7172.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nconst getData = (URL, defaultData) => fetch(URL)\n  .then(response => (response.ok ? response.json() : defaultData))\n  .catch(() => defaultData);\n\nexport const getPosts = () => getData(`${API_URL}posts`, []);\n\nexport const getUsers = () => getData(`${API_URL}users`, []);\n\nexport const getComments = () => getData(`${API_URL}comments`, []);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n  <div className=\"user\">\n    <b>Post by:</b>\n    <div className=\"user--name\">{user.name}</div>\n    <div className=\"user--email\">{user.email}</div>\n    <div className=\"user--address\">\n      {user.address.street}\n      <br />\n      {user.address.suite}\n      <br />\n      {user.address.city}\n    </div>\n  </div>\n);\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ comment }) => (\n  <div className=\"comment\">\n    <h4 className=\"comment--name\">\n      {comment.name}\n    </h4>\n    <div className=\"comment--email\">\n      {comment.email}\n    </div>\n    <p className=\"comment--body\">{comment.body}</p>\n  </div>\n);\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    name: PropTypes.string,\n    body: PropTypes.string,\n    email: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Comment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment';\n\nconst CommentList = ({ comments }) => (\n  <div className=\"comments\">\n    Comments:\n    {comments.map(\n      comment => <Comment key={comment.id} comment={comment} />\n    )}\n  </div>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.object\n  ).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from './User';\nimport CommentList from './CommentList';\n\nconst Post = ({ post }) => (\n  <div className=\"post\">\n    <h3 className=\"post--header\">{post.title}</h3>\n    <User user={post.user} />\n    <p className=\"post--body\">{post.body}</p>\n    <CommentList comments={post.comments} />\n  </div>\n);\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    user: PropTypes.object,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    commentsList: PropTypes.array,\n  }).isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ posts, filterPosts }) => (\n  <>\n    Enter text to filter posts by title or body:&nbsp;\n    <input\n      className=\"filter--input\"\n      type=\"text\"\n      onChange={event => filterPosts(event.target.value)}\n    />\n    <h4>\n      {posts.length}\n      &nbsp;post(s) are shown\n    </h4>\n    {posts.map(\n      post => <Post key={post.id} post={post} />\n    )}\n  </>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.object\n  ).isRequired,\n  filterPosts: PropTypes.func.isRequired,\n};\n\nexport default PostList;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getPosts, getUsers, getComments } from './api';\nimport PostList from './PostList';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isLoaded, setLoaded] = useState(false);\n  const [filter, setFilter] = useState('');\n\n  const loadPosts = async() => {\n    setLoading(true);\n\n    const [postsFromServer,\n      usersFromServer,\n      commentsFromServer] = await Promise.all(\n      [getPosts(), getUsers(), getComments()]\n    );\n\n    const preparedPosts = postsFromServer.map((post) => {\n      const user = usersFromServer.find(item => item.id === post.userId);\n      const comments = commentsFromServer\n        .filter(comment => comment.postId === post.id);\n\n      return {\n        ...post, user, comments,\n      };\n    });\n\n    setPosts(preparedPosts);\n    setLoaded(true);\n    setLoading(false);\n  };\n\n  const filterPosts = (input) => {\n    setFilter(input.toLowerCase());\n  };\n\n  const filteredPosts = posts\n    .filter(post => post.title.toLowerCase().includes(filter)\n      || (post.body.toLowerCase().includes(filter)));\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      {!isLoaded\n        ? (\n          <button\n            className=\"button--load\"\n            type=\"button\"\n            onClick={loadPosts}\n          >\n            {!isLoading\n              ? 'Load list of posts'\n              : 'Loading... Please wait...'}\n          </button>\n        )\n        : (\n          <PostList posts={filteredPosts} filterPosts={filterPosts} />\n        )}\n\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}